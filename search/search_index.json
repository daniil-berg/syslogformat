{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"syslogformat","text":"<p>Python <code>logging.Formatter</code> class for syslog style messages</p> <p>\ud83d\udcd1 Documentation \u00a0 | \u00a0 \ud83e\uddd1\u200d\ud83d\udcbb Source Code \u00a0 | \u00a0 \ud83d\udc1b Bug Tracker</p>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install syslogformat</code></p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#basic-configuration","title":"Basic configuration","text":"<p>As is the case with any logging formatter setup, you need to use the special <code>()</code> key to indicate the custom class to use. (See the Dictionary Schema Details and User-defined objects sections in the official <code>logging.config</code> documentation.)</p> <p>For example, you could use the following config dictionary, pass it to the <code>logging.config.dictConfig</code> function, and start logging like this:</p> <pre><code>import logging.config\n\nlog_config = {\n    \"version\": 1,\n    \"formatters\": {\n        \"my_syslog_formatter\": {\n            \"()\": \"syslogformat.SyslogFormatter\",\n        }\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"DEBUG\",\n            \"formatter\": \"my_syslog_formatter\",\n            \"stream\": \"ext://sys.stdout\",\n        }\n    },\n    \"root\": {\"handlers\": [\"console\"], \"level\": \"DEBUG\"},\n}\nlogging.config.dictConfig(log_config)\n\nlogging.debug(\"foo\")\nlogging.info(\"bar\")\nlogging.warning(\"baz\")\ntry:\n    raise ValueError(\"this is bad\")\nexcept ValueError as e:\n    logging.exception(\"oof\")\n</code></pre> <p>This will send the following to your stdout:</p> <pre><code>&lt;15&gt;foo | root\n&lt;14&gt;bar | root\n&lt;12&gt;baz | root\n&lt;11&gt;oof | root --&gt; Traceback (most recent call last): --&gt; File \"/path/to/module.py\", line 26, in &lt;module&gt; --&gt; raise ValueError(\"this is bad\") --&gt; ValueError: this is bad\n</code></pre>"},{"location":"#the-pri-prefix","title":"The <code>PRI</code> prefix","text":"<p>To adhere to the <code>syslog</code> standard outlined in RFC 3164, every log message must begin with the so called <code>PRI</code> part. This is a code enclosed in angle brackets that indicates the facility generating the message and severity of the event. The facility is encoded as an integer between 0 and 23 and the severity is encoded as an integer between 0 and 7. The <code>PRI</code> code is calculated by multiplying the facility by 8 and adding the severity.</p> <p>Programs like <code>systemd-journald</code> hide the <code>PRI</code> part in their output, but interpret it behind the scenes to allow things like highlighting messages of a certain level a different color and filtering by severity.</p> <p>By default the facility code <code>1</code> is used, which indicates user-level messages, but this can be easily configured (see below). Since a <code>DEBUG</code> log message corresponds to a severity of <code>7</code>, the resulting <code>PRI</code> part of the first log message in the example above is <code>&lt;15&gt;</code> (since <code>1 * 8 + 7 == 15</code>). An <code>ERROR</code> has the severity <code>3</code>, so that message has the <code>PRI</code> part <code>&lt;11&gt;</code>.</p>"},{"location":"#default-message-format","title":"Default message format","text":"<p>By default the message format of the <code>SyslogFormatter</code> is <code>%(message)s | %(name)s</code> (and equivalent for <code>$</code> or <code>{</code> styles).</p> <p>In addition, all line-breaks (including those in the exception traceback) are replaced with <code>--&gt;</code> by default.</p> <p>All of this can be easily changed and configured to fit your needs (see below).</p>"},{"location":"#configuration-options","title":"Configuration options","text":"<p>In addition to the usual formatter options, the <code>SyslogFormatter</code> provides the following parameters:</p> Parameter Description Default <code>facility</code> The facility value to use for every log message <code>1</code> <code>line_break_repl</code> To prevent a single log message taking up more than one line, every line-break (and consecutive whitespace) is replaced with this string. Passing <code>None</code> disables this behavior. <code>--&gt;</code> <code>level_formats</code> If provided a mapping of log level thresholds to format strings, the formatter will prioritize the format with the highest level threshold for all log records at or above that level. <code>None</code> <p>For more details, check the API of the <code>SyslogFormatter</code> constructor in the documentation.</p>"},{"location":"#extended-configuration-example","title":"Extended configuration example","text":"<p>Here is an example using a custom message format and specifying a different facility and line break replacement:</p> <pre><code>import logging.config\n\nlog_config = {\n    \"version\": 1,\n    \"formatters\": {\n        \"my_syslog_formatter\": {\n            \"()\": \"syslogformat.SyslogFormatter\",\n            \"format\": \"{levelname:&lt;8}{message} [{name}]\",\n            \"style\": \"{\",\n            \"facility\": 16,\n            \"line_break_repl\": \" \ud83d\ude80 \",\n        }\n    },\n    \"handlers\": {\n        \"console\": {\n            \"class\": \"logging.StreamHandler\",\n            \"level\": \"DEBUG\",\n            \"formatter\": \"my_syslog_formatter\",\n            \"stream\": \"ext://sys.stdout\",\n        }\n    },\n    \"root\": {\"handlers\": [\"console\"], \"level\": \"DEBUG\"},\n}\nlogging.config.dictConfig(log_config)\n\nlogging.debug(\"foo\")\nlogging.info(\"bar\")\nlogging.warning(\"baz\")\ntry:\n    raise ValueError(\"this is bad\")\nexcept ValueError as e:\n    logging.exception(\"oof\")\n</code></pre> <p>Output:</p> <pre><code>&lt;135&gt;DEBUG   foo [root]\n&lt;134&gt;INFO    bar [root]\n&lt;132&gt;WARNING baz [root]\n&lt;131&gt;ERROR   oof [root] \ud83d\ude80 Traceback (most recent call last): \ud83d\ude80 File \"/path/to/module.py\", line 30, in &lt;module&gt; \ud83d\ude80 raise ValueError(\"this is bad\") \ud83d\ude80 ValueError: this is bad\n</code></pre> <p>Since the facility was set to <code>16</code>, the PRI code ends up being <code>16 * 8 + 7 == 135</code> for <code>DEBUG</code> level messages and <code>16 * 8 + 3 == 131</code> for <code>ERROR</code> messages.</p> <p>Exception texts are of course still appended, when the <code>exception</code> log method is called (or the <code>exc_info</code> argument is passed), but the custom <code>line_break_repl</code> here is used for reformatting those texts.</p>"},{"location":"#dependencies","title":"Dependencies","text":"<ul> <li>Python <code>&gt;=3.8</code> <code>&lt;=3.12</code></li> <li>No third-party dependencies</li> <li>OS agnostic</li> </ul>"},{"location":"api_reference/exceptions/","title":"Exceptions","text":"<p>Exception classes specific to <code>syslogformat</code>.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.SyslogFormatError","title":"SyslogFormatError","text":"<p>             Bases: <code>Exception</code></p> <p>Base class for all exceptions in the <code>syslogformat</code> package.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.NonStandardSyslogFacility","title":"NonStandardSyslogFacility","text":"<p>             Bases: <code>ValueError</code>, <code>SyslogFormatError</code></p> <p>Used when a <code>syslog</code> facility code does not pass standard validation.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.NonStandardSyslogFacility.__init__","title":"__init__","text":"<pre><code>__init__(facility: int) -&gt; None\n</code></pre> <p>Initialized with the wrong <code>facility</code> code that was used.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.InvalidLogLevel","title":"InvalidLogLevel","text":"<p>             Bases: <code>SyslogFormatError</code></p> <p>Used when a log level is not an integer and not a registered name.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.InvalidLogLevel.__init__","title":"__init__","text":"<pre><code>__init__(value: object) -&gt; None\n</code></pre> <p>Initialized with the faulty log level.</p>"},{"location":"api_reference/exceptions/#syslogformat.exceptions.CodeShouldBeUnreachable","title":"CodeShouldBeUnreachable","text":"<p>             Bases: <code>AssertionError</code>, <code>SyslogFormatError</code></p> <p>Convenience for marking lines of code as presumably unreachable.</p>"},{"location":"api_reference/facility/","title":"Facility","text":"<p>Numerical codes for <code>syslog</code> facilities.</p> <p>These constants in this module correspond to those defined in section 4.1.1 of RFC 3164.</p>"},{"location":"api_reference/facility/#syslogformat.facility.KERNEL","title":"KERNEL  <code>module-attribute</code>","text":"<pre><code>KERNEL = 0\n</code></pre> <p>Kernel messages</p>"},{"location":"api_reference/facility/#syslogformat.facility.USER","title":"USER  <code>module-attribute</code>","text":"<pre><code>USER = 1\n</code></pre> <p>User-level messages</p>"},{"location":"api_reference/facility/#syslogformat.facility.MAIL","title":"MAIL  <code>module-attribute</code>","text":"<pre><code>MAIL = 2\n</code></pre> <p>Mail system</p>"},{"location":"api_reference/facility/#syslogformat.facility.SYSTEM_DAEMON","title":"SYSTEM_DAEMON  <code>module-attribute</code>","text":"<pre><code>SYSTEM_DAEMON = 3\n</code></pre> <p>System daemons</p>"},{"location":"api_reference/facility/#syslogformat.facility.SECURITY_4","title":"SECURITY_4  <code>module-attribute</code>","text":"<pre><code>SECURITY_4 = 4\n</code></pre> <p>Security/authorization messages</p> <p>Various operating systems have been found to utilize Facilities 4, 10, 13 and 14 for security/authorization, audit, and alert messages which seem to be similar.</p>"},{"location":"api_reference/facility/#syslogformat.facility.SYSLOGD","title":"SYSLOGD  <code>module-attribute</code>","text":"<pre><code>SYSLOGD = 5\n</code></pre> <p>Messages generated internally by syslogd</p>"},{"location":"api_reference/facility/#syslogformat.facility.LINE_PRINTER","title":"LINE_PRINTER  <code>module-attribute</code>","text":"<pre><code>LINE_PRINTER = 6\n</code></pre> <p>Line printer subsystem</p>"},{"location":"api_reference/facility/#syslogformat.facility.NETWORK_NEWS","title":"NETWORK_NEWS  <code>module-attribute</code>","text":"<pre><code>NETWORK_NEWS = 7\n</code></pre> <p>Network news subsystem</p>"},{"location":"api_reference/facility/#syslogformat.facility.UUCP","title":"UUCP  <code>module-attribute</code>","text":"<pre><code>UUCP = 8\n</code></pre> <p>UUCP subsystem</p>"},{"location":"api_reference/facility/#syslogformat.facility.CLOCK_DAEMON_9","title":"CLOCK_DAEMON_9  <code>module-attribute</code>","text":"<pre><code>CLOCK_DAEMON_9 = 9\n</code></pre> <p>Clock daemon</p> <p>Various operating systems have been found to utilize both Facilities 9 and 15 for clock (cron/at) messages.</p>"},{"location":"api_reference/facility/#syslogformat.facility.SECURITY_10","title":"SECURITY_10  <code>module-attribute</code>","text":"<pre><code>SECURITY_10 = 10\n</code></pre> <p>Security/authorization messages</p> <p>Various operating systems have been found to utilize Facilities 4, 10, 13 and 14 for security/authorization, audit, and alert messages which seem to be similar.</p>"},{"location":"api_reference/facility/#syslogformat.facility.FTP_DAEMON","title":"FTP_DAEMON  <code>module-attribute</code>","text":"<pre><code>FTP_DAEMON = 11\n</code></pre> <p>FTP daemon</p>"},{"location":"api_reference/facility/#syslogformat.facility.NTP","title":"NTP  <code>module-attribute</code>","text":"<pre><code>NTP = 12\n</code></pre> <p>NTP subsystem</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOG_AUDIT","title":"LOG_AUDIT  <code>module-attribute</code>","text":"<pre><code>LOG_AUDIT = 13\n</code></pre> <p>Log audit</p> <p>Various operating systems have been found to utilize Facilities 4, 10, 13 and 14 for security/authorization, audit, and alert messages which seem to be similar.</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOG_ALERT","title":"LOG_ALERT  <code>module-attribute</code>","text":"<pre><code>LOG_ALERT = 14\n</code></pre> <p>Log alert</p> <p>Various operating systems have been found to utilize Facilities 4, 10, 13 and 14 for security/authorization, audit, and alert messages which seem to be similar.</p>"},{"location":"api_reference/facility/#syslogformat.facility.CLOCK_DAEMON_15","title":"CLOCK_DAEMON_15  <code>module-attribute</code>","text":"<pre><code>CLOCK_DAEMON_15 = 15\n</code></pre> <p>Clock daemon</p> <p>Various operating systems have been found to utilize both Facilities 9 and 15 for clock (cron/at) messages.</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_0","title":"LOCAL_0  <code>module-attribute</code>","text":"<pre><code>LOCAL_0 = 16\n</code></pre> <p>Local use 0  (local0)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_1","title":"LOCAL_1  <code>module-attribute</code>","text":"<pre><code>LOCAL_1 = 17\n</code></pre> <p>Local use 1  (local1)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_2","title":"LOCAL_2  <code>module-attribute</code>","text":"<pre><code>LOCAL_2 = 18\n</code></pre> <p>Local use 2  (local2)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_3","title":"LOCAL_3  <code>module-attribute</code>","text":"<pre><code>LOCAL_3 = 19\n</code></pre> <p>Local use 3  (local3)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_4","title":"LOCAL_4  <code>module-attribute</code>","text":"<pre><code>LOCAL_4 = 20\n</code></pre> <p>Local use 4  (local4)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_5","title":"LOCAL_5  <code>module-attribute</code>","text":"<pre><code>LOCAL_5 = 21\n</code></pre> <p>Local use 5  (local5)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_6","title":"LOCAL_6  <code>module-attribute</code>","text":"<pre><code>LOCAL_6 = 22\n</code></pre> <p>Local use 6  (local6)</p>"},{"location":"api_reference/facility/#syslogformat.facility.LOCAL_7","title":"LOCAL_7  <code>module-attribute</code>","text":"<pre><code>LOCAL_7 = 23\n</code></pre> <p>Local use 7  (local7)</p>"},{"location":"api_reference/formatter/","title":"Formatter","text":"<p>Definition of the central <code>SyslogFormatter</code> class.</p>"},{"location":"api_reference/formatter/#syslogformat.formatter.SyslogFormatter","title":"SyslogFormatter","text":"<p>             Bases: <code>Formatter</code></p> <p>Log formatter class for <code>syslog</code>-style log messages.</p> <p>It ensures that a <code>syslog</code> PRI part is prepended to every log message. The PRI code is calculated as the facility value (provided in the constructor) multiplied by 8 plus the severity value, which is derived from the level of each log record. See the relevant section of RFC 3164 for details about <code>syslog</code> standard.</p> <p>The formatter is also equipped by default to format log messages into one-liners, such that for example exception messages and stack traces included in a log record do not result in the message spanning multiple lines in the final output.</p> <p>It also makes it possible to automatically append additional details to a log message, if the log record exceeds a specified level.</p>"},{"location":"api_reference/formatter/#syslogformat.formatter.SyslogFormatter.__init__","title":"__init__","text":"<pre><code>__init__(\n    fmt: str | None = None,\n    datefmt: str | None = None,\n    style: StyleKey = \"%\",\n    validate: bool = True,\n    *,\n    defaults: AnyMap | None = None,\n    facility: int = USER,\n    line_break_repl: str | None = \" --&gt; \",\n    level_formats: LevelFmtMap | None = None\n) -&gt; None\n</code></pre> <p>Validates the added formatter constructor arguments.</p> <p>For details about the base class' constructor parameters, the official docs provide full explanations.</p> <p>Parameters:</p> Name Type Description Default <code>fmt</code> <code>str | None</code> <p>A format string in the given <code>style</code> for the logged output as a whole. The possible mapping keys are drawn from the <code>logging.LogRecord</code> object's attributes.</p> <p>By default <code>%(message)s | %(name)s</code> will be used and passed to the parent <code>__init__</code>. If any custom string is passed, that string is passed through unchanged to the parent <code>__init__</code>.</p> <code>None</code> <code>datefmt</code> <code>str | None</code> <p>Passed through to the parent <code>__init__</code>.</p> <code>None</code> <code>style</code> <code>StyleKey</code> <p>Passed through to the parent <code>__init__</code>.</p> <code>'%'</code> <code>validate</code> <code>bool</code> <p>If <code>True</code> (default), incorrect or mismatched <code>fmt</code> and <code>style</code> will raise a <code>ValueError</code>; for example, <code>logging.Formatter('%(asctime)s - %(message)s', style='{')</code>.</p> <p>Also, if <code>True</code>, a non-standard <code>facility</code> value (i.e. not between 0 and 24) will raise a <code>NonStandardSyslogFacility</code> error. The argument is always passed through to the parent <code>__init__</code>.</p> <code>True</code> <code>defaults</code> <code>AnyMap | None</code> <p>Passed through to the parent <code>__init__</code> on Python <code>&gt;=3.10</code>. Ignored on Python <code>&lt;3.10</code>.</p> <code>None</code> <code>facility</code> <code>int</code> <p>Used to calculate the number in the PRI part at the very start of each log message. This argument should be an integer between 0 and 24. The <code>facility</code> value is multiplied by 8 and added to the numerical value of the severity that corresponds to the log level of the message.</p> <p>Details about accepted numerical values can be found in section 4.1.1 of RFC 3164. Defaults to <code>USER</code>.</p> <code>USER</code> <code>line_break_repl</code> <code>str | None</code> <p>To prevent a single log message taking up more than one line, every line-break (and consecutive whitespace) in the final log message will be replaced with the string provided here. This is useful because log records that include exception information for example normally result in the multi-line traceback being included in the log message.</p> <p>Passing <code>None</code> disables this behavior. This means the default (multi-line) exception formatting will be used.</p> <p>Defaults to <code>' --&gt; '</code>.</p> <code>' --&gt; '</code> <code>level_formats</code> <code>LevelFmtMap | None</code> <p>If provided a mapping of log level thresholds to format strings, the formatter will prioritize the format with the highest level threshold for all log records at or above that level.</p> <p>For example, say you pass the following dictionary: <pre><code>{\"WARNING\": \"foo %(message)s\",\n \"ERROR\":   \"bar %(message)s\"}\n</code></pre> Log records with the level <code>ERROR</code> or higher will be formatted with the <code>bar %(message)s</code> format; records with a level of <code>WARNING</code> or higher but below <code>ERROR</code> will be formatted with the <code>foo %(message)s</code> format; those with a level below <code>WARNING</code> will use the normal format provided via the <code>fmt</code> argument.</p> <p>The order of the provided mapping is irrelevant. If such a mapping is passed, the formats should conform to the specified <code>style</code>, just like the <code>fmt</code> argument; if any of them does not and <code>validate</code> is <code>True</code>, a <code>ValueError</code> is raised.</p> <p>If passed <code>None</code> (default) or an empty mapping, the formatter will use the normal provided <code>fmt</code> for all log messages.</p> <code>None</code> <p>Raises:</p> Type Description <code>NonStandardSyslogFacility</code> <p>If <code>validate</code> was set to <code>True</code> and the <code>facility</code> passed was not an integer between 0 and 23.</p> <code>ValueError</code> <p>If <code>validate</code> was set to <code>True</code> and the provided <code>fmt</code> or any of the values in the <code>level_formats</code> mapping (if provided) do not match the specified <code>style</code>.</p>"},{"location":"api_reference/formatter/#syslogformat.formatter.SyslogFormatter.format","title":"format","text":"<pre><code>format(record: LogRecord) -&gt; str\n</code></pre> <p>Formats a record to be compliant with syslog PRI (log level/severity).</p> <p>Ensures that line-breaks in the exception message are replaced to ensure it fits into a single line, unless this behavior was disabled.</p> <p>The rest of the logic is the same as in the parent method. The record's attribute dictionary is used as the operand to a string formatting operation which yields the returned string. Before formatting the dictionary, a couple of preparatory steps are carried out. The <code>message</code> attribute of the record is computed using LogRecord.getMessage. If the formatting string uses the time (as determined by a call to <code>usesTime</code>), formatTime is called to format the event time. If there is exception information, it is formatted using formatException and appended to the message. If stack information is available, it is appended after the exception information, using formatStack to transform it if necessary.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The <code>logging.LogRecord</code> to format as text</p> required <p>Returns:</p> Type Description <code>str</code> <p>The final log message constructed from the log record</p>"},{"location":"api_reference/formatter/#syslogformat.formatter.SyslogFormatter.formatMessage","title":"formatMessage","text":"<pre><code>formatMessage(record: LogRecord) -&gt; str\n</code></pre> <p>Takes a log record and produces a formatted message from it.</p> <p>If different level styles have been set, the one mapped to the highest level at or below that of the <code>record</code> will be used to format it.</p> <p>Otherwise the parent method is called.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>LogRecord</code> <p>The log record to format</p> required <p>Returns:</p> Type Description <code>str</code> <p>The formatted log message as text</p>"},{"location":"api_reference/helpers/","title":"Helpers","text":"<p>A few helper functions for dealing with log levels, severities and so on.</p>"},{"location":"api_reference/helpers/#syslogformat.helpers.get_syslog_pri_part","title":"get_syslog_pri_part","text":"<pre><code>get_syslog_pri_part(log_level: int, facility: int = USER) -&gt; str\n</code></pre> <p>Returns a <code>syslog</code> PRI prefix from the provided log level and facility.</p> <p>See the relevant section of RFC 3164 for details about <code>syslog</code> standard.</p> <p>Parameters:</p> Name Type Description Default <code>log_level</code> <code>int</code> <p>A Python log level number. The corresponding severity value will be determined via the <code>log_level_severity</code> function and used to calculate the PRI value.</p> required <code>facility</code> <code>int</code> <p>The <code>syslog</code> facility code. Defaults to <code>syslogformat.facility.USER</code>.</p> <code>USER</code> <p>Returns:</p> Type Description <code>str</code> <p>A string of the PRI value enclosed in angle brackets.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; get_syslog_pri_part(logging.INFO)\n&lt;14&gt;\n&gt;&gt;&gt; from syslogformat.facility import KERNEL\n&gt;&gt;&gt; get_syslog_pri_part(logging.DEBUG, KERNEL)\n&lt;7&gt;\n</code></pre>"},{"location":"api_reference/helpers/#syslogformat.helpers.normalize_log_level","title":"normalize_log_level","text":"<pre><code>normalize_log_level(level: int | str) -&gt; int\n</code></pre> <p>Returns an integer that can be interpreted as a log level number.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int | str</code> <p>If passed an integer, that value is returned unchanged. If passed a string, the corresponding level number is looked up in the level-name-mapping of the <code>logging</code> module; if the name is not found, an error is raised. Otherwise its level number is returned.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Valid log level number.</p> <p>Raises:</p> Type Description <code>InvalidLogLevel</code> <p>If <code>level</code> is a string that is not present in the keys of the level-name-mapping of the <code>logging</code> module.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; normalize_log_level(42)\n42\n&gt;&gt;&gt; normalize_log_level(\"WARNING\")\n30\n</code></pre>"},{"location":"api_reference/severity/","title":"Severity","text":"<p>Numerical codes for <code>syslog</code> severities.</p> <p>These constants in this module correspond to those defined in section 4.1.1 of RFC 3164.</p>"},{"location":"api_reference/severity/#syslogformat.severity.EMERGENCY","title":"EMERGENCY  <code>module-attribute</code>","text":"<pre><code>EMERGENCY = 0\n</code></pre> <p>System is unusable</p>"},{"location":"api_reference/severity/#syslogformat.severity.ALERT","title":"ALERT  <code>module-attribute</code>","text":"<pre><code>ALERT = 1\n</code></pre> <p>Action must be taken immediately</p>"},{"location":"api_reference/severity/#syslogformat.severity.CRITICAL","title":"CRITICAL  <code>module-attribute</code>","text":"<pre><code>CRITICAL = 2\n</code></pre> <p>Critical conditions</p>"},{"location":"api_reference/severity/#syslogformat.severity.ERROR","title":"ERROR  <code>module-attribute</code>","text":"<pre><code>ERROR = 3\n</code></pre> <p>Error conditions</p>"},{"location":"api_reference/severity/#syslogformat.severity.WARNING","title":"WARNING  <code>module-attribute</code>","text":"<pre><code>WARNING = 4\n</code></pre> <p>Warning conditions</p>"},{"location":"api_reference/severity/#syslogformat.severity.NOTICE","title":"NOTICE  <code>module-attribute</code>","text":"<pre><code>NOTICE = 5\n</code></pre> <p>Normal but significant condition</p>"},{"location":"api_reference/severity/#syslogformat.severity.INFORMATIONAL","title":"INFORMATIONAL  <code>module-attribute</code>","text":"<pre><code>INFORMATIONAL = 6\n</code></pre> <p>Informational messages</p>"},{"location":"api_reference/severity/#syslogformat.severity.DEBUG","title":"DEBUG  <code>module-attribute</code>","text":"<pre><code>DEBUG = 7\n</code></pre> <p>Debug-level messages</p>"},{"location":"api_reference/severity/#syslogformat.severity.log_level_severity","title":"log_level_severity","text":"<pre><code>log_level_severity(level_num: int) -&gt; int\n</code></pre> <p>Returns corresponding the <code>syslog</code> severity for a given Python log level.</p> <p>Details about the meaning of the numerical severity values can be found in section 4.1.1 of RFC 3164. Even though there are more codes available to syslog, the <code>EMERGENCY</code> and <code>NOTICE</code> codes are never returned here, i.e. it goes straight from <code>INFORMATIONAL</code> to <code>WARNING</code> because there is no equivalent log level in the Python logging module to <code>NOTICE</code>, and <code>EMERGENCY</code> is unnecessary because no Python script should be able to cause such severe problems. Therefore any number above logging.CRITICAL passed will result in <code>ALERT</code> being returned.</p> <p>Parameters:</p> Name Type Description Default <code>level_num</code> <code>int</code> <p>An integer representing a Python log level number</p> required <p>Returns:</p> Type Description <code>int</code> <p>One of the predefined severity codes that matches the given log level</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import logging\n&gt;&gt;&gt; log_level_severity(logging.DEBUG)\n7\n&gt;&gt;&gt; log_level_severity(logging.CRITICAL)\n2\n&gt;&gt;&gt; log_level_severity(logging.CRITICAL + 1)\n1\n&gt;&gt;&gt; log_level_severity(999_999)\n1\n</code></pre>"},{"location":"api_reference/types/","title":"Types","text":"<p>Custom type definitions/aliases.</p>"},{"location":"api_reference/types/#syslogformat.types.AnyMap","title":"AnyMap  <code>module-attribute</code>","text":"<pre><code>AnyMap = Mapping[str, Any]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.LevelFmtMap","title":"LevelFmtMap  <code>module-attribute</code>","text":"<pre><code>LevelFmtMap = Mapping[LogLevel, str]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.LogLevel","title":"LogLevel  <code>module-attribute</code>","text":"<pre><code>LogLevel = Union[int, str]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.Style","title":"Style  <code>module-attribute</code>","text":"<pre><code>Style = PercentStyle\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.StyleKey","title":"StyleKey  <code>module-attribute</code>","text":"<pre><code>StyleKey = Literal['%', '{', '$']\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs","title":"FormatterKwargs","text":"<p>             Bases: <code>TypedDict</code></p> <p>Constructor keyword-arguments of the <code>logging.Formatter</code>.</p>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs.datefmt","title":"datefmt  <code>instance-attribute</code>","text":"<pre><code>datefmt: Optional[str]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs.defaults","title":"defaults  <code>instance-attribute</code>","text":"<pre><code>defaults: Optional[AnyMap]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs.fmt","title":"fmt  <code>instance-attribute</code>","text":"<pre><code>fmt: Optional[str]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs.style","title":"style  <code>instance-attribute</code>","text":"<pre><code>style: StyleKey\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.FormatterKwargs.validate","title":"validate  <code>instance-attribute</code>","text":"<pre><code>validate: bool\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.StyleKwargs","title":"StyleKwargs","text":"<p>             Bases: <code>TypedDict</code></p> <p>Constructor keyword-arguments of any <code>logging.PercentStyle</code>.</p>"},{"location":"api_reference/types/#syslogformat.types.StyleKwargs.defaults","title":"defaults  <code>instance-attribute</code>","text":"<pre><code>defaults: NotRequired[Optional[AnyMap]]\n</code></pre>"},{"location":"api_reference/types/#syslogformat.types.StyleKwargs.fmt","title":"fmt  <code>instance-attribute</code>","text":"<pre><code>fmt: str\n</code></pre>"}]}